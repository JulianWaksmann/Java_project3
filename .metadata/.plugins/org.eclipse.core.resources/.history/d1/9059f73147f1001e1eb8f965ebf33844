package TP1_2048;

import java.awt.EventQueue;
import java.awt.Image;

import javax.swing.JFrame;
import java.awt.Toolkit;
import java.net.URL;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

//Interfaz funcional para representar el método a ejecutar en los observadores
@FunctionalInterface
interface AccionObservador {
void ejecutar(IObservadorUIJuego observador);
}

public class UIJuegoGrafico implements IUIJuego, IObservadorMotorJuego{
	private List<IObservadorUIJuego> observadores;

	private JFrame frame;

	/**
	 * Launch the application.
	 */
//	public static void main(String[] args) {
//		EventQueue.invokeLater(new Runnable() {
//			public void run() {
//				try {
//					UIJuegoGrafico window = new UIJuegoGrafico();
//					window.frame.setVisible(true);
//				} catch (Exception e) {
//					e.printStackTrace();
//				}
//			}
//		});
//	}
	
	public JFrame getFrame() {
        return frame;
    }

	/**
	 * Create the application.
	 */
	public UIJuegoGrafico() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setIconImage(Toolkit.getDefaultToolkit().getImage(UIJuegoGrafico.class.getResource("/TP1_2048/2048.gif")));
		frame.setTitle("2048");
		frame.setBounds(100, 100, 867, 510);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		JButton btnNuevoJuego = new JButton("NuevoJuego");
		btnNuevoJuego.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				btnNevoJuegoActionPerformed(e);
			}
		});
		btnNuevoJuego.setBounds(25, 26, 109, 23);
		frame.getContentPane().add(btnNuevoJuego);
		
		JButton btnArriba = new JButton("Arriba");
		btnArriba.setBounds(159, 80, 89, 23);
		frame.getContentPane().add(btnArriba);
		
		JButton btnAbajo = new JButton("Abajo");
		btnAbajo.setBounds(159, 181, 89, 23);
		frame.getContentPane().add(btnAbajo);
		
		JButton btnIzquierda = new JButton("Izquierda");
		btnIzquierda.setBounds(59, 131, 89, 23);
		frame.getContentPane().add(btnIzquierda);
		
		JButton btnDerecha = new JButton("Derecha");
		btnDerecha.setBounds(254, 131, 89, 23);
		frame.getContentPane().add(btnDerecha);
	}

	@Override
	public void AgregarObservador(IObservadorUIJuego observador) {
		observadores.add(observador);		
	}

	@Override
	public void RemoverObservador(IObservadorUIJuego observador) {
		observadores.remove(observador);		
	}
	
	
	/*********************************************
	 * Metodos genericos de llamada a observador *
	 *********************************************/
	// Ejecutar una acción en todos los observadores utilizando reflection
    public void ejecutarEnObservadores(String nombreMetodo, Object... args) {
        for (IObservadorUIJuego observador : observadores) {
            try {
                Method metodo = IObservadorMotorJuego.class.getMethod(nombreMetodo, obtenerTiposArgumentos(args));
                metodo.invoke(observador, args);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    // Obtener los tipos de los argumentos
    private Class<?>[] obtenerTiposArgumentos(Object... args) {
        Class<?>[] tipos = new Class[args.length];
        for (int i = 0; i < args.length; i++) {
            tipos[i] = args[i].getClass();
        }
        return tipos;
    }

    // Ejecutar una acción en todos los observadores
    public void ejecutarEnObservadores(AccionObservador accion) {
        for (IObservadorUIJuego observador : observadores) {
            accion.ejecutar(observador);
        }
    }
    
    private void NuevoJuego(int tamanioTablero, int probabilidadDelDos) {
		 ejecutarEnObservadores(observador -> observador.NuevoJuego(tamanioTablero, probabilidadDelDos));
	}
	
	private void Mover(Direccion direccion) {
		 ejecutarEnObservadores(observador -> observador.Mover(direccion));
	}

	@Override
	public void CrearTablero(int[][] tablero) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void RealizarPasoMovimiento(PasoMovimiento movimiento) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void ActualizarPuntos(int puntos) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void Perdio() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void Gano() {
		// TODO Auto-generated method stub
		
	}
	
	
	
	
	/************************************************************/
	public void btnNevoJuegoActionPerformed(ActionEvent e) {
		NuevoJuego(4, 90);
	}


}
