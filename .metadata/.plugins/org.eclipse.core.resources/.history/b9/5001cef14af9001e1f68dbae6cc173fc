package TP1_2048;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Image;

import javax.swing.*;
import java.awt.Toolkit;
import java.net.URL;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextArea;
import java.awt.Font;
import javax.swing.border.LineBorder;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;

//Interfaz funcional para representar el método a ejecutar en los observadores
@FunctionalInterface
interface AccionObservadorUI {
void ejecutar(IObservadorUIJuego observador);
}

public class UIJuegoGrafico implements IUIJuego, IObservadorMotorJuego{
	
	private static final int PROCENTAJE_INICIAL = 75; 
	private List<IObservadorUIJuego> observadores;
	private JFrame frame;
	private JTextArea txtConsola;
	private Odometer odometer;
	private TableroPanel pnlTablero;
	
	
	private int[][] tablero;
	
	public JFrame getFrame() {
        return frame;
    }

	public UIJuegoGrafico() {
		initialize();
	}

	private void initialize() {
		observadores = new ArrayList<IObservadorUIJuego>();
		frame = new JFrame();
		frame.setIconImage(Toolkit.getDefaultToolkit().getImage(UIJuegoGrafico.class.getResource("/TP1_2048/2048.gif")));
		frame.setTitle("2048");
		
		// Obtener dimensiones del escritorio
        Dimension tamanioEscritorio = Toolkit.getDefaultToolkit().getScreenSize();
        int ancho = (int) (tamanioEscritorio.getWidth() * PROCENTAJE_INICIAL / 100.0);
        int alto = (int) (tamanioEscritorio.getHeight() * PROCENTAJE_INICIAL / 100.0);
		
        // Establecer dimensiones del JFrame
        frame.setSize(ancho, alto);
        
        // Centrar el JFrame en la pantalla
        frame.setLocationRelativeTo(null);
        
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		JButton btnNuevoJuego = new JButton("NuevoJuego");
		btnNuevoJuego.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				btnNevoJuegoActionPerformed(e);
			}
		});
		btnNuevoJuego.setBounds(25, 26, 109, 23);
		frame.getContentPane().add(btnNuevoJuego);
		
		JButton btnArriba = new JButton("Arriba");
		btnArriba.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				movimientoPerformed(e, Direccion.ARRIBA);
			}
		});
		btnArriba.setBounds(211, 26, 89, 23);
		frame.getContentPane().add(btnArriba);
		
		JButton btnAbajo = new JButton("Abajo");
		btnAbajo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				movimientoPerformed(e, Direccion.ABAJO);
			}
		});
		btnAbajo.setBounds(211, 127, 89, 23);
		frame.getContentPane().add(btnAbajo);
		
		JButton btnIzquierda = new JButton("Izquierda");
		btnIzquierda.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				movimientoPerformed(e, Direccion.IZQUIERDA);
			}
		});

		btnIzquierda.setBounds(111, 77, 89, 23);
		frame.getContentPane().add(btnIzquierda);
		
		JButton btnDerecha = new JButton("Derecha");
		btnDerecha.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				movimientoPerformed(e, Direccion.DERECHA);
			}
		});

		btnDerecha.setBounds(306, 77, 89, 23);
		frame.getContentPane().add(btnDerecha);
		
		//Font courierNewBold = new Font("Lucida Console", Font.BOLD, 20);
		Font courierNewBold = new Font("Rockwell Extra Bold", Font.BOLD, 20);

	    odometer = new Odometer(6, 25 );
	    odometer.setBounds(516,77, 259, 60);
        odometer.setValue(0);
        frame.getContentPane().add(odometer);
        
        pnlTablero = new TableroPanel();
        pnlTablero.setBorder(new LineBorder(new Color(0, 0, 0)));
        pnlTablero.setBounds(353,186, 274, 274);
		frame.getContentPane().add(pnlTablero);
		
		/*
		txtConsola = new JTextArea();
		txtConsola.setFont(new Font("Lucida Console", Font.PLAIN, 13));
	    JScrollPane scrollPane = new JScrollPane(txtConsola, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
	    scrollPane.setBounds(25, 186, 304, 274);
	    frame.getContentPane().add(scrollPane);
	    */
	    
	    // Creamos un KeyEventDispatcher global
        KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new KeyEventDispatcher() {
            @Override
            public boolean dispatchKeyEvent(KeyEvent e) {
            	boolean procesado = procesarTecla(e); 
            	
            	if (!procesado) {
            		Component componenteOrigen = e.getComponent(); //componente original que generó el evento
            		//reenvia el evento al componente con foco
                    Component componenteEnFoco = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
                    if (componenteEnFoco != null && componenteEnFoco != componenteOrigen && componenteEnFoco instanceof Component) {
                        // Enviamos el evento de teclado al componente original
                    	componenteEnFoco.dispatchEvent(e);
                    }
            		
            	}
            	
                
                // retorna false para permitir que el evento siga su curso normal
            	// Retorna true para indicar que el evento fue procesado
                return procesado;
            }
        });
	    
	    
	}

	@Override
	public void AgregarObservador(IObservadorUIJuego observador) {
		observadores.add(observador);		
	}

	@Override
	public void RemoverObservador(IObservadorUIJuego observador) {
		observadores.remove(observador);		
	}
	
	
	/*********************************************
	 * Metodos genericos de llamada a observador *
	 *********************************************/
	// Ejecutar una acción en todos los observadores utilizando reflection
    public void ejecutarEnObservadores(String nombreMetodo, Object... args) {
        for (IObservadorUIJuego observador : observadores) {
            try {
                Method metodo = IObservadorMotorJuego.class.getMethod(nombreMetodo, obtenerTiposArgumentos(args));
                metodo.invoke(observador, args);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    // Obtener los tipos de los argumentos
    private Class<?>[] obtenerTiposArgumentos(Object... args) {
        Class<?>[] tipos = new Class[args.length];
        for (int i = 0; i < args.length; i++) {
            tipos[i] = args[i].getClass();
        }
        return tipos;
    }

    // Ejecutar una acción en todos los observadores
    public void ejecutarEnObservadores(AccionObservadorUI accion) {
        for (IObservadorUIJuego observador : observadores) {
            accion.ejecutar(observador);
        }
    }
    
    private void NuevoJuego(int tamanioTablero, int probabilidadDelDos) {
		 ejecutarEnObservadores(observador -> observador.NuevoJuego(tamanioTablero, probabilidadDelDos));
	}
	
	private void Mover(Direccion direccion) {
		 ejecutarEnObservadores(observador -> observador.Mover(direccion));
	}

	@Override
	public void CrearTablero(int[][] tablero) {
		
		this.pnlTablero.setTamanioTablero(tablero.length);
		
		this.tablero= new int[tablero.length][tablero.length];
		for(int y = 0; y < tablero.length; y++) {
			for (int x =0; x < tablero.length; x ++) {
				this.tablero[y][x] = tablero[y][x];
			}
		}
		imprimirTablero(this.tablero);
	}

	@Override
	public void RealizarPasoMovimiento(PasoMovimiento movimiento) {
		this.tablero[movimiento.getDestino().getY()][movimiento.getDestino().getX()] = movimiento.getOrigen().getValor();
		this.pnlTablero.setValorFicha(movimiento);
		imprimirTablero(this.tablero);
	}

	@Override
	public void ActualizarPuntos(int puntos) {
		odometer.setValue(puntos);
	}

	@Override
	public void Perdio() {
		//txtConsola.append("Jugador: PERDIO \r\n\r\n");
		debugPrint("Jugador: PERDIO \r\n\r\n");
	}

	@Override
	public void Gano() {
		//txtConsola.append("Jugador: GANO \r\n\r\n");
		debugPrint("Jugador: GANO \r\n\r\n");
	}
	
	
	
	
	/************************************************************/
	private void btnNevoJuegoActionPerformed(ActionEvent e) {
		NuevoJuego(4, 90);
	}
	
	private void  movimientoPerformed(ActionEvent e, Direccion direccion) {
		Mover(direccion);
	}
	
	private boolean procesarTecla(KeyEvent e) {
		boolean procesado = false;
		if (e.getID() == KeyEvent.KEY_PRESSED) {
			int codigoTecla = e.getKeyCode();
			switch(codigoTecla) {
			case KeyEvent.VK_UP:
				Mover(Direccion.ARRIBA);
				procesado = true;
				break;
			case KeyEvent.VK_RIGHT:
				Mover(Direccion.DERECHA);
				procesado = true;
				break;
			case KeyEvent.VK_DOWN:
				Mover(Direccion.ABAJO);
				procesado = true;
				break;
			case KeyEvent.VK_LEFT:
				Mover(Direccion.IZQUIERDA);
				procesado = true;
				break;
			}
		}
		
		return procesado;
	}
	
	private void debugPrint(String str) {
		System.out.print(str);
	}
	
	
	private void imprimirTablero(int[][] tablero) {
		
		StringBuilder sb = new StringBuilder();
        for (int i = 0; i < tablero.length; i++) {
            sb.append("+----");
        }
        sb.append("+\r\n");
        String separador = sb.toString();
		
		for(int y = 0; y < tablero.length; y++) {
			//txtConsola.append(separador);
			debugPrint(separador);
			for (int x =0; x < tablero.length; x ++) {
				//txtConsola.append("|" + String.format("%4d", tablero[y][x]));
				debugPrint("|" + String.format("%4d", tablero[y][x]));
			}
			//txtConsola.append("|\r\n");
			debugPrint("|\r\n");
		}
		//txtConsola.append(separador + "\r\n\r\n");
		debugPrint(separador + "\r\n\r\n");
	}
}
