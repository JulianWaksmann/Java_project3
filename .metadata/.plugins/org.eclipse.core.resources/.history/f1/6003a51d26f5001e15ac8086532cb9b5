package TP1_2048;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

//Interfase funcional para representar el m√©todo a ejecutar en los observadores
@FunctionalInterface
interface AccionObservadorMotor {
 void ejecutar(IObservadorMotorJuego observador);
}


public class MotorJuego implements IMotorJuego, IObservadorUIJuego{
	
	int[][] tablero;
	int puntos;
	int probabilidadDelDos;
	int tamanioTablero;
	private List<IObservadorMotorJuego> observadores;
	
	public MotorJuego() {
		observadores = new ArrayList<IObservadorMotorJuego>();
	}

	@Override
	public void NuevoJuego(int tamanioTablero, int probabilidadDelDos) {
		this.tamanioTablero = tamanioTablero;
		this.probabilidadDelDos = probabilidadDelDos;
		iniciarJuego();
		
	}

	@Override
	public void Mover(Direccion direccion) {
		switch(direccion) {
		case ARRIBA:
			moverArriba();
			break;
		case DERECHA:
			moverDerecha();
			break;
		case ABAJO:
			moverAbajo();
			break;
		case IZQUIERDA:
			moverIzquierda();
		}
		
		if (perdioJuego()) {
			perdio();
		}
		else
		{
			if (ganoJuego()) {
				gano();
			}
		}
	}

	@Override
	public void AgregarObservador(IObservadorMotorJuego observador) {
		observadores.add(observador);
	}

	@Override
	public void RemoverObservador(IObservadorMotorJuego observador) {
		observadores.remove(observador);
	}
	
	
	//metodos privados
	private void iniciarJuego()
	{
		//genera un nuevo tablero vacio
		this.tablero = new int[tamanioTablero][tamanioTablero];
		//avisa a los observadores que hay un nuevo tablero
		crearTablero(this.tablero);
		this.puntos = 0;
		actualizarPuntos(this.puntos);
		
		//Genera las primeras dos celdas
		obtenerNuevaCelda();
		obtenerNuevaCelda();
	}
	
	//obtener una nueva celda
	private boolean obtenerNuevaCelda() {
		final Random random = new Random();
		Celda celdaLibre = null;
		
		List<Integer> celdasLibres = obtenerCeldasLibres();
		
		if (celdasLibres.size() > 0) {
			int index = random.nextInt(celdasLibres.size());
			int nroCeldaLibre = celdasLibres.get(index);
			int valor = obtenernuevoValorCelda();
			celdaLibre = new Celda(nroCeldaLibre % this.tamanioTablero, nroCeldaLibre / this.tamanioTablero, valor);
			tablero[celdaLibre.getY()][celdaLibre.getX()] = celdaLibre.getValor();
			
			//avisa a los observadores que hay una nueva celda en el tablero
			PasoMovimiento pasoNuevaCelda = new PasoMovimiento(celdaLibre, celdaLibre);
			realizarPasoMovimiento(pasoNuevaCelda);
		}
		//si hay lugar para una nueva celda => celdaLibre != null
		return (celdaLibre != null);
	}
	
	private boolean celdaOcupada(int x, int y) {
		return this.tablero[y][x] != 0;
	}
	
	private boolean celdaVacia(int x, int y) {
		return !celdaOcupada(x, y);
	}
	
	/******************************************************
	* Las celdas estan numeradas con la siguiente formula *
	* nroCelda = coordenadaY*tamanioTablero+coordenadaX   *
	* *****************************************************/
	private List<Integer> obtenerCeldasLibres() {
		List<Integer> celdasVacias = new ArrayList<Integer>();
		for(int y = 0; y < this.tamanioTablero; y ++) {
			for (int x = 0; x < this.tamanioTablero; x++) {
				if (celdaVacia(x, y)) {
					celdasVacias.add(y * this.tamanioTablero + x);
				}
			}
		}
		return celdasVacias;
	}
	
	private int obtenernuevoValorCelda() {
		final Random random = new Random();

		//numero aleatorio entre 1 y 100
		int numeroAleatorio = random.nextInt(100) + 1;

        if (numeroAleatorio <= this.probabilidadDelDos) {
            return 2;
        } else {
            return 4;
        }
	}
	
	private void moverArriba() {
		//construye un vector por cada columna y la pasa al motor de movimiento
		//recorriendo el tablero de IZQUEIRDA A DERECHA y DE ARRIBA HACIA ABAJO
		//el primer elemento del vector es hacia donde se mueven las demas celdas
		Celda[] columnaCeldas = null;
		boolean hayMovimiento = false;
		
		for (int x = 0; x < this.tamanioTablero ; x++) {
			columnaCeldas = new Celda[this.tamanioTablero];
			for (int y = 0; y < this.tamanioTablero ; y++) {
				columnaCeldas[y] = new Celda(x, y, this.tablero[y][x]);
			}
			ResultadoMovimiento res = realizarMovimientoEnFilaColumna(columnaCeldas); 
			boolean tmpMovimiento = res.getHayMovimiento();
			actualizarPuntos(res.getPuntaje());
			hayMovimiento =  hayMovimiento || tmpMovimiento;
		}
		if (hayMovimiento) {
			obtenerNuevaCelda();
		}
	}
	
	private void moverDerecha() {
		//construye un vector por cada columna y la pasa al motor de movimiento
		//recorriendo el tablero de DE ARRIBA HACIA ABAJO Y DE DERECHA A IZQUIERDA
		//el primer elemento del vector es hacia donde se mueven las demas celdas
		Celda[] filaCeldas = null;
		boolean hayMovimiento = false;
		
		for (int y = 0; y < this.tamanioTablero ; y++) {
			filaCeldas = new Celda[this.tamanioTablero];
			for (int x = 0; x < this.tamanioTablero ; x++) {
				filaCeldas[x] = new Celda(this.tamanioTablero - x - 1, y, this.tablero[y][this.tamanioTablero - x - 1]);
			}
			ResultadoMovimiento res = realizarMovimientoEnFilaColumna(filaCeldas); 
			boolean tmpMovimiento = res.getHayMovimiento();
			actualizarPuntos(res.getPuntaje());
			hayMovimiento =  hayMovimiento || tmpMovimiento;
		}
		if (hayMovimiento) {
			obtenerNuevaCelda();
		}
	}
	
	private void moverAbajo() {
		//construye un vector por cada columna y la pasa al motor de movimiento
		//recorriendo el tablero de IZQUEIRDA A DERECHA y DE ABAJO HACIA ARRIBA
		//el primer elemento del vector es hacia donde se mueven las demas celdas
		Celda[] columnaCeldas = null;
		boolean hayMovimiento = false;
		
		for (int x = 0; x < this.tamanioTablero ; x++) {
			columnaCeldas = new Celda[this.tamanioTablero];
			for (int y = 0; y < this.tamanioTablero ; y++) {
				columnaCeldas[y] = new Celda(x, this.tamanioTablero - y - 1, this.tablero[this.tamanioTablero - y -1][x]);
			}
			ResultadoMovimiento res = realizarMovimientoEnFilaColumna(columnaCeldas); 
			boolean tmpMovimiento = res.getHayMovimiento();
			actualizarPuntos(res.getPuntaje());
			hayMovimiento =  hayMovimiento || tmpMovimiento;
		}
		if (hayMovimiento) {
			obtenerNuevaCelda();
		}
	}
	 
	private void moverIzquierda() {
		//construye un vector por cada columna y la pasa al motor de movimiento
		//recorriendo el tablero de DE ARRIBA HACIA ABAJO Y DE DERECHA A IZQUIERDA
		//el primer elemento del vector es hacia donde se mueven las demas celdas
		Celda[] filaCeldas = null;
		boolean hayMovimiento = false;
		
		for (int y = 0; y < this.tamanioTablero ; y++) {
			filaCeldas = new Celda[this.tamanioTablero];
			for (int x = 0; x < this.tamanioTablero ; x++) {
				filaCeldas[x] = new Celda(x, y, this.tablero[y][x]);
			}
			ResultadoMovimiento res = realizarMovimientoEnFilaColumna(filaCeldas); 
			boolean tmpMovimiento = res.getHayMovimiento();
			actualizarPuntos(res.getPuntaje());
			hayMovimiento =  hayMovimiento || tmpMovimiento;
		}
		if (hayMovimiento) {
			obtenerNuevaCelda();
		}
	}
	
	/*
	 * recorre el vector
	 */
	private ResultadoMovimiento realizarMovimientoEnFilaColumna(Celda[] celdas) {
		PasoMovimiento paso;
		boolean hayMovimiento = false;
		int puntosJugada = 0;

		int i = 0;
		while(i < celdas.length - 1 && !estaVacioAlFinal(celdas, i)) {
			if (celdas[i].getValor() == 0) {
				desplazarCeldas(celdas, i);
				hayMovimiento = true;
			}
			else {
				if (celdas[i + 1].getValor() == 0) {
					desplazarCeldas(celdas, i + 1);
					hayMovimiento = true;
				}
				else {
					if (celdas[i].getValor() == celdas[i + 1].getValor()) {
						paso = new PasoMovimiento(celdas[i + 1], celdas[i]);
						realizarPasoMovimiento(paso);

						celdas[i].setValor(celdas[i].getValor() * 2);
						puntosJugada += celdas[i].getValor();
						paso = new PasoMovimiento(celdas[i], celdas[i]);
						realizarPasoMovimiento(paso);
						desplazarCeldas(celdas, i + 1);
						hayMovimiento = true;
					}
					i++;
				}
			}
		}
		
		if (hayMovimiento) {
			actualizarTableroDespuesDeMovimientoCeldas(celdas);
		}
		ResultadoMovimiento ret = new ResultadoMovimiento(hayMovimiento, puntosJugada);
		return ret;
		
	}
	
	private void actualizarTableroDespuesDeMovimientoCeldas( Celda[] celdas) {
		for(int i = 0; i < celdas.length; i++) {
			tablero[celdas[i].getY()][celdas[i].getX()] = celdas[i].getValor();
		}
	}
	
	private boolean estaVacioAlFinal(Celda[] celdas, int indiceDestino) {
		boolean ret = true;
		for(int i = indiceDestino + 1; i < this.tamanioTablero; i++ ) {
			ret = ret && (celdas[i].getValor() == 0);
		}
		return ret;
	}
	
	
	
	private void desplazarCeldas(Celda[] celdas, int indiceDestino) {
		PasoMovimiento paso;
		for(int i = indiceDestino; i < this.tamanioTablero -1; i++ ) {
			paso = new PasoMovimiento(celdas[i + 1], celdas[i]);
			realizarPasoMovimiento(paso);
			celdas[i].setValor(celdas[i + 1].getValor());
		}
		celdas[this.tamanioTablero - 1].setValor(0);
		paso = new PasoMovimiento(celdas[this.tamanioTablero - 1], celdas[this.tamanioTablero - 1]);
		realizarPasoMovimiento(paso);
	}
	
	
	private boolean ganoJuego() {
		boolean gano = false;
		int y = 0;
		int x = 0;
		while (!gano && y < this.tamanioTablero) {
			while (!gano && x < this.tamanioTablero) {
				gano = this.tablero[y][x] == 2048;
				x++;
			}
			y++;
		}
		return gano;
	}
	
	private boolean perdioJuego() {
		//verifica si puede mover hacia la derecha o a la izquierda
		int filaColumna = 0;
		boolean puedeMover = false;
		while (!puedeMover && filaColumna < this.tamanioTablero - 1) {
			puedeMover = puedeMover(filaColumna);
			filaColumna++;
		}
		
		//if (!puedeMover) {
		//	perdioJuego();
		//}
		
		return !puedeMover;
	}
	
	
	private boolean puedeMover(int filaColumna) {
		int indice = 0;
		boolean puedeMover = false;
		while (!puedeMover && indice < this.tamanioTablero - 1) {
			//verifica si puede mover a la derecha
			puedeMover = this.tablero[filaColumna][indice + 1] == 0 || this.tablero[filaColumna][indice] == this.tablero[filaColumna][indice + 1];

			//verifica si puede mover a la izquierda
			puedeMover = puedeMover || this.tablero[filaColumna][this.tamanioTablero - indice - 2] == 0 ||this.tablero[filaColumna][this.tamanioTablero - indice - 1] == this.tablero[filaColumna][this.tamanioTablero - indice - 2];
			
			//verifica si puede mover hacia abajo
			puedeMover = puedeMover || this.tablero[indice + 1][filaColumna] == 0 || this.tablero[indice][filaColumna] == this.tablero[indice + 1][filaColumna];
			
			//verifica si puede mover hacia arriba
			puedeMover = puedeMover || this.tablero[this.tamanioTablero - indice - 2][filaColumna] == 0 || this.tablero[this.tamanioTablero - indice - 1][filaColumna] == this.tablero[this.tamanioTablero - indice - 2][filaColumna];

			indice++;
		}
		return puedeMover;
	}
	
	/*********************************************
	 * Metodos genericos de llamada a observador *
	 *********************************************/
	// Ejecutar una acci√≥n en todos los observadores utilizando reflection
    public void ejecutarEnObservadores(String nombreMetodo, Object... args) {
        for (IObservadorMotorJuego observador : observadores) {
            try {
                Method metodo = IObservadorMotorJuego.class.getMethod(nombreMetodo, obtenerTiposArgumentos(args));
                metodo.invoke(observador, args);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    // Obtener los tipos de los argumentos
    private Class<?>[] obtenerTiposArgumentos(Object... args) {
        Class<?>[] tipos = new Class[args.length];
        for (int i = 0; i < args.length; i++) {
            tipos[i] = args[i].getClass();
        }
        return tipos;
    }

    // Ejecutar una acci√≥n en todos los observadores
    public void ejecutarEnObservadores(AccionObservadorMotor accion) {
        for (IObservadorMotorJuego observador : observadores) {
            accion.ejecutar(observador);
        }
    }
    
 // Crear tablero en todos los observadores
    public void crearTablero(int[][] tablero) {
        ejecutarEnObservadores(observador -> observador.CrearTablero(tablero));
    }

    // Realizar paso de movimiento en todos los observadores
    public void realizarPasoMovimiento(PasoMovimiento movimiento) {
        ejecutarEnObservadores(observador -> observador.RealizarPasoMovimiento(movimiento));
    }

    // Actualizar puntos en todos los observadores
    public void actualizarPuntos(int puntos) {
    	if (puntos > 0) {
    		this.puntos += puntos;
    		ejecutarEnObservadores(observador -> observador.ActualizarPuntos(this.puntos));
    	}
    }

    // Indicar que se perdio en todos los observadores
    public void perdio() {
        ejecutarEnObservadores(observador -> observador.Perdio());
    }

    // Indicar que se gano en todos los observadores
    public void gano() {
        ejecutarEnObservadores(observador -> observador.Gano());
    }

}

